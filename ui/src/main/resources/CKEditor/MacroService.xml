<?xml version="1.0" encoding="UTF-8"?>

<!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
-->

<xwikidoc version="1.2" reference="CKEditor.MacroService" locale="">
  <web>CKEditor</web>
  <name>MacroService</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <creator>xwiki:XWiki.Admin</creator>
  <creationDate>1458047924000</creationDate>
  <parent>CKEditor.WebHome</parent>
  <author>xwiki:XWiki.Admin</author>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <date>1462889727000</date>
  <contentUpdateDate>1462889391000</contentUpdateDate>
  <version>1.1</version>
  <title/>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>true</hidden>
  <content>{{velocity output="false"}}
## ================================================================
## Returned JSON format:
##
## {
##   'options': {
##     'allMacrosExcludedCategories': [
##       (translated category name), ...
##     ]
##   },
##   'list': [
##     {
##       'id': (macro id),
##       'name': (translated macro name),
##       'description': (translated macro description),
##       'defaultCategory': (translated macro category),
##     },
##     ...
##   ]
## }
## ================================================================
#macro (getMacroList $syntaxId)
  #set ($syntax = $services.rendering.resolveSyntax($syntaxId))
  #set ($macroDescriptors = $services.rendering.getMacroDescriptors($syntax))
  #if (!$macroDescriptors)
    ## Before XWiki 9.7RC1 we had to use APIs that require programming rights.
    #set ($macroDescriptors = [])
    #try()
      #set ($macroManager = $services.component.getInstance('org.xwiki.rendering.macro.MacroManager'))
      #foreach ($macroId in $macroManager.getMacroIds($syntax))
        #set ($macroDescriptor = $macroManager.getMacro($macroId).descriptor)
        #set ($discard = $macroDescriptors.add($macroDescriptor))
      #end
    #end
  #end
  #set ($data = {})
  #set ($allMacrosExcludedCategories = [])
  #set ($discard = $allMacrosExcludedCategories.add("#maybeTranslate('rendering.macroCategory.Internal' 'Internal')"))
  #set ($discard = $allMacrosExcludedCategories.add("#maybeTranslate('rendering.macroCategory.Deprecated' 'Deprecated')"))
  #set ($discard = $data.put('options', { 'allMacrosExcludedCategories' : $allMacrosExcludedCategories }))
  #set ($macroList = [])
  #foreach ($macroDescriptor in $macroDescriptors)
    #set ($macroTranslationKey = "rendering.macro.$macroDescriptor.id")
    #set ($macroCategoryTranslationKey = "rendering.macroCategory.$macroDescriptor.defaultCategory")
    #set ($discard = $macroList.add({
      'id': $macroDescriptor.id,
      'name': "#maybeTranslate(""${macroTranslationKey}.name"" $macroDescriptor.name)",
      'description': "#maybeTranslate(""${macroTranslationKey}.description"" $macroDescriptor.description)",
      'defaultCategory': "#maybeTranslate($macroCategoryTranslationKey $macroDescriptor.defaultCategory)"
    }))
  #end
  #set ($macroList = $sorttool.sort($macroList, 'name'))
  #set ($discard = $data.put('list', $macroList))
#end

#macro (maybeGetMacroDescriptor $macroIdAsString)
  #set ($macroDescriptor = $NULL)
  #set ($macroId = $services.rendering.resolveMacroId($macroIdAsString))
  #if ($macroId)
    #set ($macroDescriptor = $services.rendering.getMacroDescriptor($macroId))
    #if (!$macroDescriptor &amp;&amp; $macroId.syntax)
      ## Try the macro id without the syntax.
      #set ($macroId = $services.rendering.resolveMacroId($macroId.id))
      #set ($macroDescriptor = $services.rendering.getMacroDescriptor($macroId))
    #end
  #else
    ## Either the macro id could not be resolved (unlikely) or we are on an older XWiki instance (before 10.10RC1) where
    ## we had to use APIs that require programming rights.
    #getMacroWithPR($macroIdAsString)
    #if ($xmacro)
      #set ($macroDescriptor = $xmacro.descriptor)
    #end
  #end
  #if ($macroDescriptor)
    #getMacroDescriptor($macroDescriptor)
  #end
#end

#macro (getMacroWithPR $macroIdAsString)
  #set ($xmacro = $NULL)
  #try()
    #set ($macroIdFactory = $services.component.getInstance('org.xwiki.rendering.macro.MacroIdFactory'))
    #set ($macroId = $macroIdFactory.createMacroId($macroIdAsString))
    #set ($macroManager = $services.component.getInstance('org.xwiki.rendering.macro.MacroManager'))
    #if ($macroManager.exists($macroId))
      #set ($xmacro = $macroManager.getMacro($macroId))
    #elseif ($macroId.syntax)
      ## Try the macro id without the syntax.
      #set ($macroId = $macroIdFactory.createMacroId($macroId.id))
      #if ($macroManager.exists($macroId))
        #set ($xmacro = $macroManager.getMacro($macroId))
      #end
    #end
  #end
#end

#macro (getMacroDescriptor $macroDescriptor)
  ## Translate the macro name and description.
  #set ($macroTranslationKey = "rendering.macro.$macroDescriptor.id")
  #set ($data = {
    'id': $macroDescriptor.id,
    'name': "#maybeTranslate(""${macroTranslationKey}.name"" $macroDescriptor.name)",
    'description': "#maybeTranslate(""${macroTranslationKey}.description"" $macroDescriptor.description)",
    'defaultCategory': $macroDescriptor.defaultCategory,
    'supportsInlineMode': $macro.supportsInlineMode(),
    'parameterDescriptorMap': {}
  })
  #if ($macroDescriptor.contentDescriptor)
    ## Translate the content label and description.
    ## Treat the macro content as if it is the last macro parameter.
    #set ($data.contentDescriptor = {
      'name': "#maybeTranslate('rendering.macroContent' 'Content')",
      'description': "#maybeTranslate(""${macroTranslationKey}.content.description""
        $macroDescriptor.contentDescriptor.description)",
      'mandatory': $macroDescriptor.contentDescriptor.mandatory,
      'type': "$!macroDescriptor.contentDescriptor.type",
      'index': $macroDescriptor.parameterDescriptorMap.size()
    })
  #end
  #foreach ($entry in $macroDescriptor.parameterDescriptorMap.entrySet())
    #set ($parameterDescriptor = $entry.value)
    ## Translate the parameter name and description.
    #set ($parameterTranslationKey = "${macroTranslationKey}.parameter.$parameterDescriptor.id")
    #set ($translatedParameterDescriptor = {
      'id': $parameterDescriptor.id,
      'name': "#maybeTranslate(""${parameterTranslationKey}.name"" $parameterDescriptor.name)",
      'description': "#maybeTranslate(""${parameterTranslationKey}.description"" $parameterDescriptor.description)",
      'mandatory': $parameterDescriptor.mandatory,
      'defaultValue': $parameterDescriptor.defaultValue,
      'type': $parameterDescriptor.parameterType,
      'index': $foreach.index
    })
    #if ($parameterDescriptor.parameterType.isEnum())
      ## Collect the allowed parameter values.
      #set ($translatedParameterDescriptor.type = 'enum')
      #if ($parameterDescriptor.defaultValue)
        #set ($parameterValues = $parameterDescriptor.defaultValue.values())
      #else
        ## A parameter of type enum that doesn't have a default value is very unlikely. We attempt to read the list of
        ## possible values from the enum type in this case, which is currently forbidden, but at least it will generate
        ## a warning in the logs that will help us investigate the problem.
        #set ($parameterValues = $parameterDescriptor.parameterType.getEnumConstants())
      #end
      #set ($translatedParameterDescriptor.values = [])
      ## Translate the allowed parameter values.
      #foreach ($parameterValue in $parameterValues)
        #set ($discard = $translatedParameterDescriptor.values.add({
          'id': $parameterValue,
          'label': "#maybeTranslate(""${parameterTranslationKey}.value.$parameterValue"" $parameterValue)"
        }))
      #end
    #elseif (($parameterDescriptor.defaultValue == 'false' || $parameterDescriptor.defaultValue == 'true')
        &amp;&amp; $macroDescriptor.parametersBeanClass.getSimpleName() == 'WikiMacroParameters')
      #set ($translatedParameterDescriptor.type = 'boolean')
      #set ($translatedParameterDescriptor.defaultValue = $parameterDescriptor.defaultValue == 'true')
    #end
    ## Make sure the key is lowercase (for XWiki &lt;9.0).
    ## See XWIKI-13990: Inconsistency between Java-based and Wiki-based rendering macros regarding the parameter
    ## descriptor map keys
    #set ($discard = $data.parameterDescriptorMap.put($entry.key.toLowerCase(), $translatedParameterDescriptor))
  #end
#end

#macro (maybeTranslate $key $defaultValue)
  #if ($services.localization.get($key))
    $services.localization.render($key)##
  #else
    $!defaultValue##
  #end
#end
{{/velocity}}

{{velocity wiki="false"}}
#if ("$!request.data" != '')
  #set ($data = $NULL)
  #if ($request.data == 'list')
    #getMacroList($request.syntaxId)
  #elseif ($request.data == 'descriptor')
    #maybeGetMacroDescriptor($request.macroId)
  #end
  #if ($data)
    #set ($discard = $response.setContentType('application/json'))
    $jsontool.serialize($data)
  #else
    $response.sendError(404)
  #end
#end
{{/velocity}}</content>
</xwikidoc>
