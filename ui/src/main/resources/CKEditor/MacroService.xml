<?xml version="1.0" encoding="UTF-8"?>

<!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
-->

<xwikidoc version="1.2" reference="CKEditor.MacroService" locale="">
  <web>CKEditor</web>
  <name>MacroService</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <creator>xwiki:XWiki.Admin</creator>
  <creationDate>1458047924000</creationDate>
  <parent>CKEditor.WebHome</parent>
  <author>xwiki:XWiki.Admin</author>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <date>1462889727000</date>
  <contentUpdateDate>1462889391000</contentUpdateDate>
  <version>1.1</version>
  <title/>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>true</hidden>
  <content>{{velocity wiki="false"}}
#if ("$!request.data" != '')
  #set ($data = $NULL)
  #if ($request.data == 'list')
    #getMacroList($request.syntaxId)
  #elseif ($request.data == 'descriptor')
    #maybeGetMacroDescriptor($request.macroId)
  #end
  #if ($data)
    #set ($discard = $response.setContentType('application/json'))
    ## We would have used getSimpleName() but it's not accessible before XWiki 6.4.3 (XWIKI-11916).
    #if ($data.getClass().getName().endsWith('.JSONObject'))
      $data
    #else
      $jsontool.serialize($data)
    #end
  #else
    $response.sendError(404)
  #end
#end

#macro (getMacroList $syntaxId)
  #set ($macroManager = $services.component.getInstance('org.xwiki.rendering.macro.MacroManager'))
  #set ($syntax = $services.rendering.resolveSyntax($syntaxId))
  #set ($data = [])
  #foreach ($macroId in $macroManager.getMacroIds($syntax))
    #set ($macroDescriptor = $macroManager.getMacro($macroId).descriptor)
    #set ($macroTranslationKey = "rendering.macro.$macroId")
    #set ($macroCategoryTranslationKey = "rendering.macroCategory.$macroDescriptor.defaultCategory")
    #set ($discard = $data.add({
      'id': $macroId,
      'name': "#maybeTranslate(""${macroTranslationKey}.name"" $macroDescriptor.name)",
      'description': "#maybeTranslate(""${macroTranslationKey}.description"" $macroDescriptor.description)",
      'defaultCategory': "#maybeTranslate($macroCategoryTranslationKey $macroDescriptor.defaultCategory)"
    }))
  #end
  #set ($data = $sorttool.sort($data, 'name'))
#end

#macro (maybeGetMacroDescriptor $macroIdAsString)
  #set ($macroIdFactory = $services.component.getInstance('org.xwiki.rendering.macro.MacroIdFactory'))
  #set ($macroId = $macroIdFactory.createMacroId($macroIdAsString))
  #set ($macroManager = $services.component.getInstance('org.xwiki.rendering.macro.MacroManager'))
  #if ($macroManager.exists($macroId))
    #getMacroDescriptor($macroId)
  #elseif ($macroId.syntax)
    ## Try the macro id without the syntax.
    #set ($macroId = $macroIdFactory.createMacroId($macroId.id))
    #if ($macroManager.exists($macroId))
      #getMacroDescriptor($macroId)
    #end
  #end
#end

#macro (getMacroDescriptor $macroId)
  #set ($macro = $macroManager.getMacro($macroId))
  #set ($macroDescriptor = $macro.descriptor)
  #set ($data = $jsontool.parse($jsontool.serialize($macroDescriptor)))
  ## Specify whether the macro can be inserted in-line or not.
  #set ($data.supportsInlineMode = $macro.supportsInlineMode())
  ## Translate the macro name and description.
  #set ($macroTranslationKey = "rendering.macro.$macroId")
  #set ($data.name = "#maybeTranslate(""${macroTranslationKey}.name"" $macroDescriptor.name)")
  #set ($data.description = "#maybeTranslate(""${macroTranslationKey}.description"" $macroDescriptor.description)")
  #if ($data.contentDescriptor)
    ## Translate the content label and description.
    #set ($data.contentDescriptor.name = "#maybeTranslate('rendering.macroContent' 'Content')")
    #set ($data.contentDescriptor.description = "#maybeTranslate(""${macroTranslationKey}.content.description""
      $data.contentDescriptor.description)")
  #end
  ## Make sure the keys in the parameter descriptor map are all lowercase.
  ## See XWIKI-13990: Inconsistency between Java-based and Wiki-based rendering macros regarding the parameter
  ## descriptor map keys
  #set ($parameterDescriptorMap = $collectionstool.orderedMap)
  #foreach ($entry in $macroDescriptor.parameterDescriptorMap.entrySet())
    #set ($parameterDescriptor = $data.parameterDescriptorMap.get($entry.key))
    #set ($discard = $parameterDescriptorMap.put($entry.key.toLowerCase(), $parameterDescriptor))
    ## Translate the parameter name and description.
    #set ($parameterTranslationKey = "${macroTranslationKey}.parameter.$parameterDescriptor.id")
    #set ($parameterDescriptor.name = "#maybeTranslate(""${parameterTranslationKey}.name"" $parameterDescriptor.name)")
    #set ($parameterDescriptor.description = "#maybeTranslate(""${parameterTranslationKey}.description"" $parameterDescriptor.description)")
    #set ($parameterType = $entry.value.parameterType)
    #if ($parameterType.isEnum())
      ## Collect the allowed parameter values.
      #set ($parameterDescriptor.type = 'enum')
      #if ($entry.value.defaultValue)
        #set ($parameterValues = $entry.value.defaultValue.values())
      #else
        ## A parameter of type enum that doesn't have a default value is very unlikely. We attempt to read the list of
        ## possible values from the enum type in this case, which is currently forbidden, but at least it will generate
        ## a warning in the logs that will help us investigate the problem.
        #set ($parameterValues = $parameterType.getEnumConstants())
      #end
      #set ($parameterDescriptor.values = [])
      ## Translate the allowed parameter values.
      #foreach ($parameterValue in $parameterValues)
        #set ($discard = $parameterDescriptor.values.add({
          'id': $parameterValue,
          'label': "#maybeTranslate(""${parameterTranslationKey}.value.$parameterValue"" $parameterValue)"
        }))
      #end
    #elseif (($parameterDescriptor.defaultValue == 'false' || $parameterDescriptor.defaultValue == 'true')
        &amp;&amp; $data.parametersBeanClass.endsWith('.WikiMacroParameters'))
      #set ($parameterDescriptor.type = 'boolean')
      #set ($parameterDescriptor.defaultValue = $parameterDescriptor.defaultValue == 'true')
    #end
  #end
  #set ($data.parameterDescriptorMap = $parameterDescriptorMap)
#end

#macro (maybeTranslate $key $defaultValue)
  #if ($services.localization.get($key))
    $services.localization.render($key)##
  #else
    $!defaultValue##
  #end
#end
{{/velocity}}</content>
</xwikidoc>
